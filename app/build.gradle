plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "com.panoramagl.sample"
        gradle.startParameter.taskNames.each {
            if (it.contains("cAT")) {
                minSdkVersion 21
            } else {
                minSdkVersion 15
            }
        }
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        viewBinding = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.13.2'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation project(':library')
    implementation "androidx.core:core-ktx:1.6.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation 'com.github.AppDevNext:Moka:1.1'
    androidTestImplementation "androidx.test.espresso:espresso-core:3.4.0"
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation "androidx.test:runner:1.4.0"

    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation "androidx.test.ext:truth:1.4.0"
}

def adbDirectory = '/storage/emulated/0/Download'
def reportsDirectory = "$projectDir/../screenshots/adb"

def clearScreenshotsTask = task('clearScreenshots', type: Exec) {
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'rm', '-r', adbDirectory
}

def createScreenshotDirectoryTask = task('createScreenshotDirectory', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'mkdir', '-p', adbDirectory
}

def fetchScreenshotsTask = task('fetchScreenshots', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'pull', adbDirectory + '/.', reportsDirectory

    dependsOn {
        createScreenshotDirectoryTask
    }

    doFirst {
        new File(reportsDirectory).mkdirs()
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'connectedDebugAndroidTest') {
        task.mustRunAfter {
            clearScreenshotsTask
        }
        task.finalizedBy {
            fetchScreenshotsTask
        }
    }
}

